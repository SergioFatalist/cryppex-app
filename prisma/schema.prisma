generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOWDB_URL")
  extensions        = [pgcrypto]
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  telegramId   String        @unique @map("telegram_id")
  username     String?       @map("username") @db.VarChar
  firstName    String?       @map("first_name") @db.VarChar
  lastName     String?       @map("last_name") @db.VarChar
  languageCode String?       @map("language_code") @db.VarChar
  balance      Int           @default(0) @map("balance")
  farm         Int           @default(0) @map("farm")
  referrer     User?         @relation("referrer", fields: [referrerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  referrerId   String?       @map("referrer_id") @db.Uuid
  referrals    User[]        @relation("referrer")
  loginEpoch   Int?          @map("login_epoch")
  transactions Transaction[]
  accounts     Address[]

  @@map("users")
}

model Address {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id") @db.Uuid
  address String @db.VarChar

  @@map("addresses")
}

model Transaction {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id") @db.Uuid
  startEpoch Int      @map("start_epoch")
  endEpoch   Int?     @map("end_epoch")
  success    Boolean?
  direction  String

  @@map("transactions")
}
