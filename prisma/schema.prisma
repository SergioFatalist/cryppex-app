generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOWDB_URL")
  extensions        = [pgcrypto]
}

model User {
  id           BigInt        @id
  username     String?       @map("username") @db.VarChar
  firstName    String?       @map("first_name") @db.VarChar
  lastName     String?       @map("last_name") @db.VarChar
  languageCode String?       @map("language_code") @db.VarChar
  address      String        @map("address") @db.VarChar
  privateKey   String        @map("private_key") @db.VarChar
  balance      BigInt        @default(0) @map("balance")
  ref          User?         @relation("ref", fields: [refId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  refId        BigInt?       @map("ref_id")
  referrals    User[]        @relation("ref")
  created      BigInt        @map("created")
  transactions Transaction[]
  bonuses      Bonus[]
  investments  Investment[]
  events       Event[]

  @@map("users")
}

model Bonus {
  id      BigInt  @id @default(autoincrement())
  userId  BigInt  @map("user_id")
  refId   BigInt  @map("ref_id")
  amount  BigInt  @default(0)
  created BigInt  @map("created")
  applied Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])

  @@map("bonuses")
}

model Transaction {
  id             BigInt  @id @default(autoincrement())
  user           User    @relation(fields: [userId], references: [id])
  userId         BigInt  @map("user_id")
  refId          BigInt? @map("ref_id")
  txID           String? @unique @map("tx_id") @db.VarChar()
  txTime         BigInt  @map("tx_time")
  txOwnerAddress String? @map("tx_owner_address") @db.VarChar()
  txToAddress    String? @map("tx_to_address") @db.VarChar()
  amount         BigInt  @default(0)
  success        Boolean @default(false)
  pending        Boolean @default(true)
  internal       Boolean @default(true)
  type           String

  @@map("transactions")
}

model Investment {
  id       BigInt  @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   BigInt  @map("user_id")
  amount   BigInt
  rate     Int
  interest BigInt
  start    BigInt
  finish   BigInt
  closed   Boolean @default(false)

  @@map("investments")
}

model Event {
  id        BigInt  @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    BigInt  @map("user_id")
  eventTime BigInt? @map("event_time")
  eventType String? @map("event_type") @db.VarChar()
  eventText String? @map("event_text")

  @@map("events")
}

model Account {
  id          String @unique
  address     String @map("address") @db.VarChar
  privateKey  String @map("private_key") @db.VarChar
  lastLogin   Int    @map("last_login")
  lastCounter BigInt @map("last_counter")

  @@map("accounts")
}

view UserInfo {
  id              BigInt  @id
  username        String? @map("username") @db.VarChar
  firstName       String? @map("first_name") @db.VarChar
  lastName        String? @map("last_name") @db.VarChar
  languageCode    String? @map("language_code") @db.VarChar
  address         String  @map("address") @db.VarChar
  balance         BigInt  @map("balance")
  refId           BigInt? @map("ref_id")
  created         BigInt  @map("created")
  investsCount    Int?    @map("invests_count")
  investsAmount   BigInt? @map("invests_amount")
  investsInterest BigInt? @map("invests_interest")

  @@map("users_info")
}

view RefInfo {
  id           BigInt  @id
  username     String? @map("username") @db.VarChar
  firstName    String? @map("first_name") @db.VarChar
  lastName     String? @map("last_name") @db.VarChar
  languageCode String? @map("language_code") @db.VarChar
  balance      BigInt  @map("balance")
  refId        BigInt? @map("ref_id")
  created      BigInt  @map("created")
  pending      BigInt? @map("pending")
  applied      BigInt? @map("applied")

  @@map("refs_info")
}
